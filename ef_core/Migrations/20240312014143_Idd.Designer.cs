// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace csharpTest.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240312014143_Idd")]
    partial class Idd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirportArrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("stop")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AirportArrival");
                });

            modelBuilder.Entity("AirportDeparture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("stop")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AirportDeparture");
                });

            modelBuilder.Entity("DataLog2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuantityID")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityID1")
                        .HasColumnType("int");

                    b.Property<int>("SourceID")
                        .HasColumnType("int");

                    b.Property<int?>("SourceID1")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuantityID");

                    b.HasIndex("QuantityID1");

                    b.HasIndex("SourceID");

                    b.HasIndex("SourceID1");

                    b.ToTable("DataLog2");
                });

            modelBuilder.Entity("Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("FlightPlan", b =>
                {
                    b.Property<int>("DepartureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartureId"));

                    b.Property<int>("ArrivalId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DepartureId1")
                        .HasColumnType("int");

                    b.Property<int>("FlightNumber")
                        .HasColumnType("int");

                    b.Property<double>("FlightTime")
                        .HasColumnType("float");

                    b.HasKey("DepartureId");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("DepartureId1");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("Quantity", b =>
                {
                    b.Property<int>("QuantityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuantityID"));

                    b.HasKey("QuantityID");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Property<int>("SourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceID"));

                    b.HasKey("SourceID");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("DataLog2", b =>
                {
                    b.HasOne("Quantity", "Quantity")
                        .WithMany()
                        .HasForeignKey("QuantityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quantity", null)
                        .WithMany("DataLog2s")
                        .HasForeignKey("QuantityID1");

                    b.HasOne("Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Source", null)
                        .WithMany("DataLog2s")
                        .HasForeignKey("SourceID1");

                    b.Navigation("Quantity");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FlightPlan", b =>
                {
                    b.HasOne("AirportArrival", "Arrival")
                        .WithMany("Flights")
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirportDeparture", "Departure")
                        .WithMany("Flights")
                        .HasForeignKey("DepartureId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("Departure");
                });

            modelBuilder.Entity("AirportArrival", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AirportDeparture", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Quantity", b =>
                {
                    b.Navigation("DataLog2s");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Navigation("DataLog2s");
                });
#pragma warning restore 612, 618
        }
    }
}
